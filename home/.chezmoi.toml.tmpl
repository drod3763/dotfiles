{{/* boolean feature tags */}}
{{- $headless := false -}}{{/* true if this machine does not have a screen and keyboard */}}
{{- $transient := false -}}{{/* true if this machine is temporary, e.g. a cloud or VM instance */}}
{{- $personal := false -}}{{/* true if this machine should have personal secrets */}}
{{- "" -}}

{{/* determine whether the current machine is a laptop or desktop */}}
{{- $chassisType := "desktop" -}}
{{- if eq .chezmoi.os "darwin" -}}
{{-     if contains "MacBook" (output "sysctl" "-n" "hw.model") -}}
{{-         $chassisType = "laptop" -}}
{{-     else -}}
{{-         $chassisType = "desktop" -}}
{{-     end -}}
{{- else if eq .chezmoi.os "linux" -}}
{{-     $chassisType = (output "hostnamectl" "--json=short" | mustFromJson).Chassis -}}
{{- else if eq .chezmoi.os "windows" -}}
{{-     $chassisType = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "if ((Get-CimInstance -Class Win32_Battery | Measure-Object).Count -gt 0) { Write-Output 'laptop' } else { Write-Output 'desktop' }") | trim -}}
{{- end -}}

{{/* determine how many CPU cores and threads the current machine has */}}
{{- $cpuCores := 1 -}}
{{- $cpuThreads := 1 -}}
{{- if eq .chezmoi.os "darwin" -}}
{{-     $cpuCores = (output "sysctl" "-n" "hw.physicalcpu_max") | trim | atoi -}}
{{-     $cpuThreads = (output "sysctl" "-n" "hw.logicalcpu_max") | trim | atoi -}}
{{- else if eq .chezmoi.os "linux" -}}
{{-     $cpuCores = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | sort --field-separator=',' --key='2,4' --unique | wc --lines") | trim | atoi -}}
{{-     $cpuThreads = (output "sh" "-c" "lscpu --online --parse | grep --invert-match '^#' | wc --lines") | trim | atoi -}}
{{- else if eq .chezmoi.os "windows" -}}
{{-     $cpuCores = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfCores") | trim | atoi -}}
{{-     $cpuThreads = (output "powershell.exe" "-NoProfile" "-NonInteractive" "-Command" "(Get-CimInstance -ClassName 'Win32_Processor').NumberOfLogicalProcessors") | trim | atoi -}}
{{- end -}}

{{- $osID := .chezmoi.os -}}
{{- if (and (eq .chezmoi.os "linux") (hasKey .chezmoi.osRelease "id")) -}}
{{-     $osID = printf "%s-%s" .chezmoi.os .chezmoi.osRelease.id -}}
{{- end -}}

{{/* detect GitHub codespaces and VSCode remote containers */}}
{{- if or (env "CODESPACES") (env "REMOTE_CONTAINERS_IPC") -}}
{{-     $headless = true -}}
{{-     $transient = true -}}
{{- end -}}

{{- $hostname := .chezmoi.hostname -}}
{{- if eq .chezmoi.os "darwin" -}}
{{-     $computerName := output "scutil" "--get" "ComputerName" | trim -}}
{{-     $hostname = $computerName -}}
{{- end -}}

{{- $shell := "" -}}
{{- if (hasKey . "shell") -}}
{{-     $shell = .shell -}}
{{- else if eq .chezmoi.os "darwin" "linux" -}}
{{-     if eq (env "SHELL" | trunc -3) "zsh" -}}
{{-         $shell = "zsh" -}}
{{-     else if eq (env "SHELL" | trunc -4) "bash" -}}
{{-         $shell = "bash" -}}
{{-     end -}}
{{- end -}}

encryption = "age"
progress = true
sourceDir = "~/.local/share/chezmoi"
remove = true
[age]
    identity = '{{ .chezmoi.sourceDir }}/age-recipients'
    recipients = ['age1yubikey1qwuvtn0dmap4zjajku0r7pd9rrhrprxj6h2ffw6md85uhuw6wqgggc6k3uj', 'age1yubikey1q2mqcvrgzhwq9ehqvm4ze4vtpe497t3n0k354gh6a2uqtc8zpavcvyn6afr']
{{- if eq .chezmoi.os "windows" -}}
[cd]
    command = 'powershell'
    args = ['-nologo']
{{- end }}
[data]
chassisType = {{ $chassisType | quote }}
cpuCores = {{ $cpuCores }}
cpuThreads = {{ $cpuThreads }}
headless = {{ $headless }}
hostname = {{ $hostname | quote }} {{/* the pipe quote is necessary for strings otherwise its interpreted as a command */}}
onepassuser = "763SAJZTRJA2BL5QKGOGGMVP7M"
osID = {{ $osID | quote }}
personal = {{ $personal }}
shell = {{ $shell | quote }}
transient = {{ $transient }}
[git]
    autoAdd = true
{{- if and (eq .chezmoi.os "linux") (lookPath "bcompare") -}}
[diff]
    command = 'bcompare' {{/* if bcompare is used, the temporary file never shows up. Need to use bcomp */}}
[merge]
    command = 'bcompare'
{{- end -}}